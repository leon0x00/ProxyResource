# mihomo 配置
# 日期：2024-12-06 10:50:50
# 配置作者：https://t.me/iKeLee
# 适用版本：所有使用 mihomo 核心的程序
port: 7890
socks-port: 7891
mixed-port: 7892
redir-port: 7893
tproxy-port: 7894

unified-delay: true
geodata-mode: false
geodata-loader: standard
geo-auto-update: true
geo-update-interval: 24
tcp-concurrent: true
find-process-mode: strict
global-client-fingerprint: chrome

allow-lan: true
mode: rule
log-level: info
ipv6: false
udp: true

external-controller: 0.0.0.0:9090
# external-ui: ui
# external-ui-url: 'https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip'

geox-url:
  # geoip: 'https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/geoip.dat'
  # geosite: 'https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/geosite.dat'
  mmdb: 'https://gitlab.com/Masaiki/GeoIP2-CN/-/raw/release/Country.mmdb'
  asn: 'https://gitlab.com/Loon0x00/loon_data/-/raw/main/geo/GeoLite2-ASN.mmdb'

profile:
  store-selected: true
  store-fake-ip: true

sniffer:
  enable: true
  force-dns-mapping: true
  parse-pure-ip: true
  override-destination: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - +.v2ex.com

  skip-domain:
    - Mijia Cloud

tun:
  enable: true
  stack: system
  dns-hijack:
    - any:53
  auto-route: true
  auto-detect-interface: true

dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter:
    - '*'
    - +.lan
  default-nameserver:
    - 223.5.5.5
    - 223.6.6.6
  nameserver:
    - https://223.5.5.5/dns-query#h3=true
    - https://223.6.6.6/dns-query#h3=true

# 锚点 - 节点订阅的参数 [每小时更新一次订阅节点，每 6 秒一次健康检查]
NodeParam:
  &NodeParam {
    type: http,
    interval: 3600,
    health-check:
      {
        enable: true,
        url: 'https://www.gstatic.com/generate_204',
        interval: 6,
      },
  }

# 锚点 - 节点订阅
proxy-providers:
  机场名称1:
    url: '机场1的订阅URL'
    <<: *NodeParam
    path: './proxy_providers/机场名称1.yaml'
    override:
      additional-prefix: '[机场名称1] ' # 为订阅节点添加机场名称前缀

# 锚点 - 节点筛选组
FilterHK: &FilterHK '^(?=.*((?i)🇭🇰|香港|(\b(HK|Hong)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterTW: &FilterTW '^(?=.*((?i)🇹🇼|台湾|(\b(TW|Tai|Taiwan)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterJP: &FilterJP '^(?=.*((?i)🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(\b(JP|Japan)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterKR: &FilterKR '^(?=.*((?i)🇰🇷|韩国|韓|首尔|(\b(KR|Korea)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterSG: &FilterSG '^(?=.*((?i)🇸🇬|新加坡|狮|(\b(SG|Singapore)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterUS: &FilterUS '^(?=.*((?i)🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(US|United States)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterGame: &FilterGame '^(?=.*((?i)游戏|🎮|(\b(GAME)(\d+)?\b)))(?!.*((?i)回国|校园)).*$'
FilterAll: &FilterAll '^(?=.*(.))(?!.*((?i)群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|(\b(USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author)(\d+)?\b|(\d{4}-\d{2}-\d{2}|\dG)))).*$'

# 策略组参数锚点
# 锚点 - 时延优选参数 [每 6 秒一次惰性健康检查，容差 20ms，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
UrlTest:
  &UrlTest {
    type: url-test,
    interval: 6,
    tolerance: 20,
    lazy: true,
    url: 'http://www.gstatic.com/generate_204',
    disable-udp: false,
    timeout: 2000,
    max-failed-times: 3,
    hidden: true,
    include-all-providers: true,
  }
# 锚点 - 故障转移参数 [每 6 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
FallBack:
  &FallBack {
    type: fallback,
    interval: 6,
    lazy: true,
    url: 'http://www.gstatic.com/generate_204',
    disable-udp: false,
    timeout: 2000,
    max-failed-times: 3,
    hidden: true,
    include-all-providers: true,
  }
# 锚点 - 负载均衡参数 [每 6 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
LoadBalance:
  &LoadBalance {
    type: load-balance,
    interval: 6,
    lazy: true,
    url: 'http://www.gstatic.com/generate_204',
    disable-udp: false,
    strategy: consistent-hashing,
    timeout: 2000,
    max-failed-times: 3,
    hidden: true,
    include-all-providers: true,
  }
# 锚点 - 规则参数 [每小时更新一次订阅规则，更新规则时使用直连策略]
RuleProviders:
  &RuleProviders {
    type: http,
    behavior: classical,
    interval: 3600,
    format: text,
  }

# 策略组
proxy-groups:
  - {
      name: 节点选择,
      type: select,
      proxies:
        [
          自动选择,
          香港策略,
          台湾策略,
          日本策略,
          韩国策略,
          狮城策略,
          美国策略,
          手动切换,
          全球直连,
        ],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/Global.png',
    }
  - {
      name: 自动选择,
      <<: *UrlTest,
      hidden: false,
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/Speedtest.png',
    }
  - {
      name: 手动切换,
      type: select,
      include-all-providers: true,
      filter: *FilterAll,
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/Static.png',
    }
  - {
      name: AI,
      type: select,
      proxies:
        [
          台湾策略,
          节点选择,
          自动选择,
          香港策略,
          日本策略,
          韩国策略,
          狮城策略,
          美国策略,
          手动切换,
          全球直连,
        ],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/OpenAI.png',
    }
  - {
      name: Spotify,
      type: select,
      proxies:
        [
          香港策略,
          节点选择,
          自动选择,
          台湾策略,
          日本策略,
          韩国策略,
          狮城策略,
          美国策略,
          手动切换,
          全球直连,
        ],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/Spotify.png',
    }
  - {
      name: Telegram,
      type: select,
      proxies:
        [
          狮城策略,
          节点选择,
          自动选择,
          香港策略,
          台湾策略,
          日本策略,
          韩国策略,
          美国策略,
          手动切换,
          全球直连,
        ],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/Telegram.png',
    }

  - {
      name: YouTube,
      type: select,
      proxies:
        [
          节点选择,
          自动选择,
          香港策略,
          台湾策略,
          日本策略,
          韩国策略,
          狮城策略,
          美国策略,
          手动切换,
          全球直连,
        ],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/YouTube.png',
    }
  - {
      name: Netflix,
      type: select,
      proxies:
        [
          节点选择,
          自动选择,
          香港策略,
          台湾策略,
          日本策略,
          韩国策略,
          狮城策略,
          美国策略,
          手动切换,
          全球直连,
        ],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/Netflix.png',
    }
  - {
      name: Apple,
      type: select,
      proxies:
        [
          全球直连,
          节点选择,
          自动选择,
          香港策略,
          台湾策略,
          日本策略,
          韩国策略,
          狮城策略,
          美国策略,
          手动切换,
        ],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/Apple.png',
    }
  - {
      name: Microsoft,
      type: select,
      proxies:
        [
          节点选择,
          自动选择,
          香港策略,
          台湾策略,
          日本策略,
          韩国策略,
          狮城策略,
          美国策略,
          手动切换,
          全球直连,
        ],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/Microsoft.png',
    }
  - {
      name: 全球拦截,
      type: select,
      proxies: [REJECT, DIRECT],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/Adblock.png',
    }
  - {
      name: 全球直连,
      type: select,
      proxies: [DIRECT],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/China.png',
    }
  - {
      name: 漏网之鱼,
      type: select,
      proxies:
        [
          节点选择,
          自动选择,
          香港策略,
          台湾策略,
          日本策略,
          韩国策略,
          狮城策略,
          美国策略,
          手动切换,
          全球直连,
        ],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/Final.png',
    }
  - {
      name: 香港策略,
      type: select,
      proxies: [香港时延优选策略组, 香港故障转移策略组, 香港负载均衡策略组],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/HK.png',
    }
  - {
      name: 台湾策略,
      type: select,
      proxies: [台湾时延优选策略组, 台湾故障转移策略组, 台湾负载均衡策略组],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/TW.png',
    }
  - {
      name: 日本策略,
      type: select,
      proxies: [日本时延优选策略组, 日本故障转移策略组, 日本负载均衡策略组],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/JP.png',
    }
  - {
      name: 韩国策略,
      type: select,
      proxies: [韩国时延优选策略组, 韩国故障转移策略组, 韩国负载均衡策略组],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/KR.png',
    }
  - {
      name: 狮城策略,
      type: select,
      proxies: [狮城时延优选策略组, 狮城故障转移策略组, 狮城负载均衡策略组],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/SG.png',
    }
  - {
      name: 美国策略,
      type: select,
      proxies: [美国时延优选策略组, 美国故障转移策略组, 美国负载均衡策略组],
      icon: 'https://raw.githubusercontent.com/Orz-3/mini/master/Color/US.png',
    }

  # 时延优选策略组
  - { name: 香港时延优选策略组, <<: *UrlTest, filter: *FilterHK }
  - { name: 台湾时延优选策略组, <<: *UrlTest, filter: *FilterTW }
  - { name: 日本时延优选策略组, <<: *UrlTest, filter: *FilterJP }
  - { name: 韩国时延优选策略组, <<: *UrlTest, filter: *FilterKR }
  - { name: 狮城时延优选策略组, <<: *UrlTest, filter: *FilterSG }
  - { name: 美国时延优选策略组, <<: *UrlTest, filter: *FilterUS }

  # 故障转移策略组
  - { name: 香港故障转移策略组, <<: *FallBack, filter: *FilterHK }
  - { name: 台湾故障转移策略组, <<: *FallBack, filter: *FilterTW }
  - { name: 日本故障转移策略组, <<: *FallBack, filter: *FilterJP }
  - { name: 韩国故障转移策略组, <<: *FallBack, filter: *FilterKR }
  - { name: 狮城故障转移策略组, <<: *FallBack, filter: *FilterSG }
  - { name: 美国故障转移策略组, <<: *FallBack, filter: *FilterUS }

  # 负载均衡策略组
  - { name: 香港负载均衡策略组, <<: *LoadBalance, filter: *FilterHK }
  - { name: 台湾负载均衡策略组, <<: *LoadBalance, filter: *FilterTW }
  - { name: 日本负载均衡策略组, <<: *LoadBalance, filter: *FilterJP }
  - { name: 韩国负载均衡策略组, <<: *LoadBalance, filter: *FilterKR }
  - { name: 狮城负载均衡策略组, <<: *LoadBalance, filter: *FilterSG }
  - { name: 美国负载均衡策略组, <<: *LoadBalance, filter: *FilterUS }

# 订阅规则
rule-providers:
  LocalAreaNetwork:
    <<: *RuleProviders
    path: './rules/LocalAreaNetwork.list'
    url: 'https://github.com/ACL4SSR/ACL4SSR/raw/refs/heads/master/Clash/LocalAreaNetwork.list'

  UnBan:
    <<: *RuleProviders
    path: './rules/UnBan.list'
    url: 'https://github.com/ACL4SSR/ACL4SSR/raw/refs/heads/master/Clash/UnBan.list'

  BanAD:
    <<: *RuleProviders
    path: './rules/BanAD.list'
    url: 'https://github.com/ACL4SSR/ACL4SSR/raw/refs/heads/master/Clash/BanAD.list'

  BanProgramAD:
    <<: *RuleProviders
    path: './rules/BanProgramAD.list'
    url: 'https://github.com/ACL4SSR/ACL4SSR/raw/refs/heads/master/Clash/BanProgramAD.list'

  BanEasyListChina:
    <<: *RuleProviders
    path: './rules/BanEasyListChina.list'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanEasyListChina.list'

  GoogleCN:
    <<: *RuleProviders
    path: './rules/GoogleCN.list'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/GoogleCN.list'

  SteamCN:
    <<: *RuleProviders
    path: './rules/SteamCN.list'
    url: 'https://github.com/ACL4SSR/ACL4SSR/raw/refs/heads/master/Clash/Ruleset/SteamCN.list'

  OwnRules:
    <<: *RuleProviders
    path: './rules/OwnRules.list'
    url: 'https://raw.githubusercontent.com/leon0x00/ProxyResource/refs/heads/main/OwnRules.list'

  Tmdb:
    <<: *RuleProviders
    path: './rules/Tmdb.list'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Tmdb/Tmdb.list'

  Microsoft:
    <<: *RuleProviders
    path: './rules/Microsoft.list'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Microsoft/Microsoft.list'

  Apple:
    <<: *RuleProviders
    path: './rules/Apple.list'
    url: 'https://github.com/ACL4SSR/ACL4SSR/raw/refs/heads/master/Clash/Apple.list'

  Telegram:
    <<: *RuleProviders
    path: './rules/Telegram.list'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Telegram.list'

  AI:
    <<: *RuleProviders
    path: './rules/AI.list'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/OpenAI/OpenAI.list'

  Spotify:
    <<: *RuleProviders
    path: './rules/Spotify.list'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Spotify/Spotify.list'

  YouTube:
    <<: *RuleProviders
    path: './rules/YouTube.list'
    url: 'https://github.com/ACL4SSR/ACL4SSR/raw/refs/heads/master/Clash/Ruleset/YouTube.list'

  Netflix:
    <<: *RuleProviders
    path: './rules/Netflix.list'
    url: 'https://github.com/ACL4SSR/ACL4SSR/raw/refs/heads/master/Clash/Ruleset/Netflix.list'

  ProxyMedia:
    <<: *RuleProviders
    path: './rules/ProxyMedia.list'
    url: 'https://github.com/ACL4SSR/ACL4SSR/raw/refs/heads/master/Clash/ProxyMedia.list'

  ProxyGFWlist:
    <<: *RuleProviders
    path: './rules/ProxyGFWlist.list'
    url: 'https://github.com/ACL4SSR/ACL4SSR/raw/refs/heads/master/Clash/ProxyGFWlist.list'

  ChinaDomain:
    <<: *RuleProviders
    path: './rules/ChinaDomain.list'
    url: 'https://github.com/ACL4SSR/ACL4SSR/raw/refs/heads/master/Clash/ChinaDomain.list'

  ChinaCompanyIp:
    <<: *RuleProviders
    path: './rules/ChinaCompanyIp.list'
    url: 'https://github.com/ACL4SSR/ACL4SSR/raw/refs/heads/master/Clash/ChinaCompanyIp.list'

  Download:
    <<: *RuleProviders
    path: './rules/Download.list'
    url: 'https://github.com/ACL4SSR/ACL4SSR/raw/refs/heads/master/Clash/Download.list'

# 规则指向
rules:
  - RULE-SET, LocalAreaNetwork, 全球直连
  - RULE-SET, UnBan, 全球直连
  - RULE-SET, BanAD, 全球拦截
  - RULE-SET, BanProgramAD, 全球拦截
  - RULE-SET, BanEasyListChina, 全球拦截
  - RULE-SET, GoogleCN, 全球直连
  - RULE-SET, SteamCN, 全球直连
  - RULE-SET, OwnRules, 全球直连
  - RULE-SET, Tmdb, 全球直连
  - RULE-SET, Microsoft, Microsoft
  - RULE-SET, Apple, Apple
  - RULE-SET, Telegram, Telegram
  - RULE-SET, AI, AI
  - RULE-SET, Spotify, Spotify
  - RULE-SET, YouTube, YouTube
  - RULE-SET, Netflix, Netflix
  - RULE-SET, ProxyMedia, 节点选择
  - RULE-SET, ProxyGFWlist, 节点选择
  - RULE-SET, ChinaDomain, 全球直连
  - RULE-SET, ChinaCompanyIp, 全球直连
  - RULE-SET, Download, 全球直连
  - GEOIP, CN, 全球直连
  - MATCH, 漏网之鱼
