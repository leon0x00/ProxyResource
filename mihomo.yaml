# mihomo 配置
# 日期：2024-11-27 16:32:51
# 配置作者：https://t.me/iKeLee
# 适用版本：所有使用 mihomo 核心的程序
port: 7890
socks-port: 7891
mixed-port: 7892
redir-port: 7893
tproxy-port: 7894

unified-delay: true
geodata-mode: false
geodata-loader: standard
geo-auto-update: true
geo-update-interval: 24
tcp-concurrent: true
find-process-mode: strict
global-client-fingerprint: chrome

allow-lan: true
mode: rule
log-level: info
ipv6: true
udp: true

external-controller: 0.0.0.0:9090
# external-ui: ui
# external-ui-url: 'https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip'

geox-url:
  # geoip: 'https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/geoip.dat'
  # geosite: 'https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/geosite.dat'
  mmdb: 'https://gitlab.com/Masaiki/GeoIP2-CN/-/raw/release/Country.mmdb'
  asn: 'https://gitlab.com/Loon0x00/loon_data/-/raw/main/geo/GeoLite2-ASN.mmdb'

profile:
  store-selected: true
  store-fake-ip: true

sniffer:
  enable: true
  force-dns-mapping: true
  parse-pure-ip: true
  override-destination: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - +.v2ex.com

  skip-domain:
    - Mijia Cloud

tun:
  enable: true
  stack: system
  dns-hijack:
    - any:53
  auto-route: true
  auto-detect-interface: true

dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter:
    - '*'
    - +.lan
  default-nameserver:
    - 223.5.5.5
    - 223.6.6.6
  nameserver:
    - https://223.5.5.5/dns-query#h3=true
    - https://223.6.6.6/dns-query#h3=true

# 锚点 - 节点订阅的参数 [每小时更新一次订阅节点，每 6 秒一次健康检查]
NodeParam:
  &NodeParam {
    type: http,
    interval: 3600,
    health-check:
      { enable: true, url: 'http://www.google.com/blank.html', interval: 6 },
  }

# 锚点 - 节点订阅
proxy-providers:
  机场名称1:
    url: '机场1的订阅URL'
    <<: *NodeParam
    path: './proxy_providers/机场名称1.yaml'
    override:
      additional-prefix: '[机场名称1] ' # 为订阅节点添加机场名称前缀

# 锚点 - 节点筛选组
FilterHK: &FilterHK '^(?=.*((?i)🇭🇰|香港|(\b(HK|Hong)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterTW: &FilterTW '^(?=.*((?i)🇹🇼|台湾|(\b(TW|Tai|Taiwan)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterJP: &FilterJP '^(?=.*((?i)🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(\b(JP|Japan)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterKR: &FilterKR '^(?=.*((?i)🇰🇷|韩国|韓|首尔|(\b(KR|Korea)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterSG: &FilterSG '^(?=.*((?i)🇸🇬|新加坡|狮|(\b(SG|Singapore)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterUS: &FilterUS '^(?=.*((?i)🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(US|United States)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterGame: &FilterGame '^(?=.*((?i)游戏|🎮|(\b(GAME)(\d+)?\b)))(?!.*((?i)回国|校园)).*$'
FilterAll: &FilterAll '^(?=.*(.))(?!.*((?i)群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|(\b(USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author)(\d+)?\b|(\d{4}-\d{2}-\d{2}|\dG)))).*$'

# 策略组参数锚点
# 锚点 - 时延优选参数 [每 6 秒一次惰性健康检查，容差 20ms，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
UrlTest:
  &UrlTest {
    type: url-test,
    interval: 6,
    tolerance: 20,
    lazy: true,
    url: 'http://www.google.com/blank.html',
    disable-udp: false,
    timeout: 2000,
    max-failed-times: 3,
    hidden: true,
    include-all-providers: true,
  }
# 锚点 - 故障转移参数 [每 6 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
FallBack:
  &FallBack {
    type: fallback,
    interval: 6,
    lazy: true,
    url: 'http://www.google.com/blank.html',
    disable-udp: false,
    timeout: 2000,
    max-failed-times: 3,
    hidden: true,
    include-all-providers: true,
  }
# 锚点 - 负载均衡参数 [每 6 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
LoadBalance:
  &LoadBalance {
    type: load-balance,
    interval: 6,
    lazy: true,
    url: 'http://www.google.com/blank.html',
    disable-udp: false,
    strategy: consistent-hashing,
    timeout: 2000,
    max-failed-times: 3,
    hidden: true,
    include-all-providers: true,
  }
# 锚点 - 规则参数 [每小时更新一次订阅规则，更新规则时使用直连策略]
RuleProviders:
  &RuleProviders {
    type: http,
    behavior: classical,
    interval: 3600,
    format: yaml,
    proxy: DIRECT,
  }

# 策略组
proxy-groups:
  - {
      name: 🚀 节点选择,
      type: select,
      proxies:
        [
          ♻️ 自动选择,
          🇭🇰 香港策略,
          🇼🇸 台湾策略,
          🇯🇵 日本策略,
          🇰🇷 韩国策略,
          🇸🇬 新国策略,
          🇺🇸 美国策略,
          🚀 手动切换,
          🎯 全球直连,
        ],
    }
  - {
      name: 🚀 手动切换,
      type: select,
      include-all-providers: true,
      filter: *FilterAll,
    }
  - { name: ♻️ 自动选择, <<: *UrlTest, hidden: false }
  - { name: 🎯 全球直连, type: select, proxies: [DIRECT] }
  - {
      name: 📲 电报消息,
      type: select,
      proxies:
        [
          🚀 节点选择,
          ♻️ 自动选择,
          🇭🇰 香港策略,
          🇼🇸 台湾策略,
          🇯🇵 日本策略,
          🇰🇷 韩国策略,
          🇸🇬 新国策略,
          🇺🇸 美国策略,
          🚀 手动切换,
          🎯 全球直连,
        ],
    }
  - {
      name: 💬 OpenAi,
      type: select,
      proxies:
        [
          🚀 节点选择,
          ♻️ 自动选择,
          🇭🇰 香港策略,
          🇼🇸 台湾策略,
          🇯🇵 日本策略,
          🇰🇷 韩国策略,
          🇸🇬 新国策略,
          🇺🇸 美国策略,
          🚀 手动切换,
          🎯 全球直连,
        ],
    }
  - {
      name: 📹 油管视频,
      type: select,
      proxies:
        [
          🚀 节点选择,
          ♻️ 自动选择,
          🇭🇰 香港策略,
          🇼🇸 台湾策略,
          🇯🇵 日本策略,
          🇰🇷 韩国策略,
          🇸🇬 新国策略,
          🇺🇸 美国策略,
          🚀 手动切换,
          🎯 全球直连,
        ],
    }
  - {
      name: 🎥 奈飞视频,
      type: select,
      proxies:
        [
          🚀 节点选择,
          ♻️ 自动选择,
          🇭🇰 香港策略,
          🇼🇸 台湾策略,
          🇯🇵 日本策略,
          🇰🇷 韩国策略,
          🇸🇬 新国策略,
          🇺🇸 美国策略,
          🚀 手动切换,
          🎯 全球直连,
        ],
    }
  - {
      name: 🌍 国外媒体,
      type: select,
      proxies:
        [
          🚀 节点选择,
          ♻️ 自动选择,
          🇭🇰 香港策略,
          🇼🇸 台湾策略,
          🇯🇵 日本策略,
          🇰🇷 韩国策略,
          🇸🇬 新国策略,
          🇺🇸 美国策略,
          🚀 手动切换,
          🎯 全球直连,
        ],
    }
  - {
      name: 🌏 国内媒体,
      type: select,
      proxies:
        [
          🚀 节点选择,
          ♻️ 自动选择,
          🇭🇰 香港策略,
          🇼🇸 台湾策略,
          🇯🇵 日本策略,
          🇰🇷 韩国策略,
          🇸🇬 新国策略,
          🇺🇸 美国策略,
          🚀 手动切换,
          🎯 全球直连,
        ],
    }
  - {
      name: Ⓜ️ 微软服务,
      type: select,
      proxies:
        [
          🚀 节点选择,
          ♻️ 自动选择,
          🇭🇰 香港策略,
          🇼🇸 台湾策略,
          🇯🇵 日本策略,
          🇰🇷 韩国策略,
          🇸🇬 新国策略,
          🇺🇸 美国策略,
          🚀 手动切换,
          🎯 全球直连,
        ],
    }
  - {
      name: 🍎 苹果服务,
      type: select,
      proxies:
        [
          🚀 节点选择,
          ♻️ 自动选择,
          🇭🇰 香港策略,
          🇼🇸 台湾策略,
          🇯🇵 日本策略,
          🇰🇷 韩国策略,
          🇸🇬 新国策略,
          🇺🇸 美国策略,
          🚀 手动切换,
          🎯 全球直连,
        ],
    }
  - {
      name: 🎮 游戏平台,
      type: select,
      proxies:
        [
          🚀 节点选择,
          ♻️ 自动选择,
          🇭🇰 香港策略,
          🇼🇸 台湾策略,
          🇯🇵 日本策略,
          🇰🇷 韩国策略,
          🇸🇬 新国策略,
          🇺🇸 美国策略,
          🚀 手动切换,
          🎯 全球直连,
        ],
    }
  - { name: 🛑 广告拦截, type: select, proxies: [REJECT, DIRECT] }
  - { name: 🍃 应用净化, type: select, proxies: [REJECT, DIRECT] }
  - {
      name: 🐟 漏网之鱼,
      type: select,
      proxies:
        [
          🚀 节点选择,
          ♻️ 自动选择,
          🇭🇰 香港策略,
          🇼🇸 台湾策略,
          🇯🇵 日本策略,
          🇰🇷 韩国策略,
          🇸🇬 新国策略,
          🇺🇸 美国策略,
          🚀 手动切换,
          🎯 全球直连,
        ],
    }
  - {
      name: 🇭🇰 香港策略,
      type: select,
      proxies: [⏱香港时延优选策略组, 🚥香港故障转移策略组, 🎛香港负载均衡策略组],
    }
  - {
      name: 🇼🇸 台湾策略,
      type: select,
      proxies: [⏱台湾时延优选策略组, 🚥台湾故障转移策略组, 🎛台湾负载均衡策略组],
    }
  - {
      name: 🇯🇵 日本策略,
      type: select,
      proxies: [⏱日本时延优选策略组, 🚥日本故障转移策略组, 🎛日本负载均衡策略组],
    }
  - {
      name: 🇰🇷 韩国策略,
      type: select,
      proxies: [⏱韩国时延优选策略组, 🚥韩国故障转移策略组, 🎛韩国负载均衡策略组],
    }
  - {
      name: 🇸🇬 新国策略,
      type: select,
      proxies: [⏱新国时延优选策略组, 🚥新国故障转移策略组, 🎛新国负载均衡策略组],
    }
  - {
      name: 🇺🇸 美国策略,
      type: select,
      proxies: [⏱美国时延优选策略组, 🚥美国故障转移策略组, 🎛美国负载均衡策略组],
    }

  # 时延优选策略组
  - { name: ⏱香港时延优选策略组, <<: *UrlTest, filter: *FilterHK }
  - { name: ⏱台湾时延优选策略组, <<: *UrlTest, filter: *FilterTW }
  - { name: ⏱日本时延优选策略组, <<: *UrlTest, filter: *FilterJP }
  - { name: ⏱韩国时延优选策略组, <<: *UrlTest, filter: *FilterKR }
  - { name: ⏱新国时延优选策略组, <<: *UrlTest, filter: *FilterSG }
  - { name: ⏱美国时延优选策略组, <<: *UrlTest, filter: *FilterUS }

  # 故障转移策略组
  - { name: 🚥香港故障转移策略组, <<: *FallBack, filter: *FilterHK }
  - { name: 🚥台湾故障转移策略组, <<: *FallBack, filter: *FilterTW }
  - { name: 🚥日本故障转移策略组, <<: *FallBack, filter: *FilterJP }
  - { name: 🚥韩国故障转移策略组, <<: *FallBack, filter: *FilterKR }
  - { name: 🚥新国故障转移策略组, <<: *FallBack, filter: *FilterSG }
  - { name: 🚥美国故障转移策略组, <<: *FallBack, filter: *FilterUS }

  # 负载均衡策略组
  - { name: 🎛香港负载均衡策略组, <<: *LoadBalance, filter: *FilterHK }
  - { name: 🎛台湾负载均衡策略组, <<: *LoadBalance, filter: *FilterTW }
  - { name: 🎛日本负载均衡策略组, <<: *LoadBalance, filter: *FilterJP }
  - { name: 🎛韩国负载均衡策略组, <<: *LoadBalance, filter: *FilterKR }
  - { name: 🎛新国负载均衡策略组, <<: *LoadBalance, filter: *FilterSG }
  - { name: 🎛美国负载均衡策略组, <<: *LoadBalance, filter: *FilterUS }

# 订阅规则
rule-providers:
  LocalAreaNetwork:
    <<: *RuleProviders
    path: './rules/LocalAreaNetwork.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/LocalAreaNetwork.list'

  UnBan:
    <<: *RuleProviders
    path: './rules/UnBan.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/UnBan.list'

  ownRules:
    <<: *RuleProviders
    path: './rules/ownRules.yaml'
    url: 'https://raw.githubusercontent.com/leon0x00/ProxyResource/refs/heads/main/ownRules.list'

  BanAD:
    <<: *RuleProviders
    path: './rules/BanAD.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanAD.list'

  BanProgramAD:
    <<: *RuleProviders
    path: './rules/BanProgramAD.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanProgramAD.list'

  GoogleCN:
    <<: *RuleProviders
    path: './rules/GoogleCN.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/GoogleCN.list'

  SteamCN:
    <<: *RuleProviders
    path: './rules/SteamCN.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/SteamCN.list'

  Microsoft:
    <<: *RuleProviders
    path: './rules/Microsoft.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Microsoft.list'

  Apple:
    <<: *RuleProviders
    path: './rules/Apple.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Apple.list'

  Telegram:
    <<: *RuleProviders
    path: './rules/Telegram.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Telegram.list'

  OpenAi:
    <<: *RuleProviders
    path: './rules/OpenAi.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/OpenAi.list'

  Epic:
    <<: *RuleProviders
    path: './rules/Epic.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Epic.list'

  Origin:
    <<: *RuleProviders
    path: './rules/Origin.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Origin.list'

  Sony:
    <<: *RuleProviders
    path: './rules/Sony.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Sony.list'

  Steam:
    <<: *RuleProviders
    path: './rules/Steam.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Steam.list'

  Nintendo:
    <<: *RuleProviders
    path: './rules/Nintendo.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Nintendo.list'

  YouTube:
    <<: *RuleProviders
    path: './rules/YouTube.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/YouTube.list'

  Netflix:
    <<: *RuleProviders
    path: './rules/Netflix.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Netflix.list'

  ChinaMedia:
    <<: *RuleProviders
    path: './rules/ChinaMedia.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaMedia.list'

  ProxyMedia:
    <<: *RuleProviders
    path: './rules/ProxyMedia.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyMedia.list'

  ProxyGFWlist:
    <<: *RuleProviders
    path: './rules/ProxyGFWlist.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyGFWlist.list'

  ChinaDomain:
    <<: *RuleProviders
    path: './rules/ChinaDomain.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaDomain.list'

  ChinaCompanyIp:
    <<: *RuleProviders
    path: './rules/ChinaCompanyIp.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaCompanyIp.list'

  Download:
    <<: *RuleProviders
    path: './rules/Download.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Download.list'

# 规则指向
rules:
  - RULE-SET, LocalAreaNetwork, 🎯 全球直连
  - RULE-SET, UnBan, 🎯 全球直连
  - RULE-SET, ownRules, 🎯 全球直连
  - RULE-SET, BanAD, 🛑 广告拦截
  - RULE-SET, BanProgramAD, 🍃 应用净化
  - RULE-SET, GoogleCN, 🎯 全球直连
  - RULE-SET, SteamCN, 🎯 全球直连
  - RULE-SET, Microsoft, Ⓜ️ 微软服务
  - RULE-SET, Apple, 🍎 苹果服务
  - RULE-SET, Telegram, 📲 电报消息
  - RULE-SET, OpenAi, 💬 OpenAi
  - RULE-SET, Epic, 🎮 游戏平台
  - RULE-SET, Origin, 🎮 游戏平台
  - RULE-SET, Sony, 🎮 游戏平台
  - RULE-SET, Steam, 🎮 游戏平台
  - RULE-SET, Nintendo, 🎮 游戏平台
  - RULE-SET, YouTube, 📹 油管视频
  - RULE-SET, Netflix, 🎥 奈飞视频
  - RULE-SET, ChinaMedia, 🌏 国内媒体
  - RULE-SET, ProxyMedia, 🌍 国外媒体
  - RULE-SET, ProxyGFWlist, 🚀 节点选择
  - RULE-SET, ChinaDomain, 🎯 全球直连
  - RULE-SET, ChinaCompanyIp, 🎯 全球直连
  - RULE-SET, Download, 🎯 全球直连
  - GEOIP, CN, 🎯 全球直连
  - MATCH, 🐟 漏网之鱼
